from aiogram import types, Dispatcher
from aiogram.dispatcher import FSMContext

from services.prompt_manager import select_prompt_for_today, get_current_prompt
from services.daily_routine import run_daily_routine
from config import ADMIN_ID

async def force_prompt_command(message: types.Message, state: FSMContext):
    await state.finish()

    if message.from_user.id != ADMIN_ID:
        await message.answer("‚õî –£ —Ç–µ–±—è –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ —ç—Ç—É –∫–æ–º–∞–Ω–¥—É.")
        return

    await select_prompt_for_today(message.bot)
    selected = get_current_prompt()

    await message.answer(
        f"‚úÖ –ó–∞–≥–æ—Ç–æ–≤–∫–∞ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è –±—ã–ª–∞ –≤—ã–±—Ä–∞–Ω–∞:\n\n`{selected}`",
        parse_mode="Markdown"
    )


async def force_routine_command(message: types.Message, state: FSMContext):
    await state.finish()
    if message.from_user.id != ADMIN_ID:
        await message.answer("‚õî –£ —Ç–µ–±—è –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ —ç—Ç—É –∫–æ–º–∞–Ω–¥—É.")
        return

    await message.answer("üïê –ó–∞–ø—É—Å–∫–∞—é –µ–∂–µ–¥–Ω–µ–≤–Ω—É—é —Ä—É—Ç–∏–Ω—É...", parse_mode=None)
    await run_daily_routine(message.bot)
    await message.answer("‚úÖ –ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è —Ä—É—Ç–∏–Ω–∞ —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞.", parse_mode=None)


def register_admin_handlers(dp: Dispatcher):
    dp.register_message_handler(force_prompt_command, commands=["forceprompt"], state="*")
    dp.register_message_handler(force_routine_command, commands=["forceroutine"], state="*")