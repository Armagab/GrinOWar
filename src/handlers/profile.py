from aiogram import types, Dispatcher
from aiogram.dispatcher import FSMContext
from keyboards.main_menu_keyboard import MainMenuButton
from utils.formatters import format_single_joke
from aiogram import types, Dispatcher
from aiogram.dispatcher import FSMContext

from database.user_queries import (
    get_user_subscription_status,
    set_user_active
)
from keyboards.main_menu_keyboard import main_menu_keyboard



async def my_stats(message: types.Message, state: FSMContext):
    await state.finish()
    user_id = message.from_user.id
    first_name = message.from_user.first_name or "–ë–µ–∑ –∏–º–µ–Ω–∏"

    stats = await get_user_stats(user_id)

    if not stats["joke_text"] or not stats["prompt"]:
        await message.answer("üòï –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–π —à—É—Ç–∫–∏.")
        return

    stats_line = f"üëç –õ–∞–π–∫–æ–≤: {stats['likes']}\nüëÅÔ∏è‚Äçüó®Ô∏è –ü—Ä–æ—Å–º–æ—Ç—Ä–æ–≤: {stats['views']}"
    formatted = format_single_joke(stats["prompt"], stats["joke_text"], first_name, stats_line)

    await message.answer(formatted, parse_mode="Markdown")


async def toggle_notifications(message: types.Message, state: FSMContext):
    await state.finish()
    user_id = message.from_user.id

    subscribed = await get_user_subscription_status(user_id)
    if subscribed:
        await set_user_active(user_id, False)
        text = "üîï –í—ã –æ—Ç–ø–∏—Å–∞–ª–∏—Å—å –æ—Ç —Ä–∞—Å—Å—ã–ª–∫–∏."
    else:
        await set_user_active(user_id, True)
        text = "üîî –í—ã –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ —Ä–∞—Å—Å—ã–ª–∫—É."

    kb = await main_menu_keyboard(user_id)
    await message.answer(text, reply_markup=kb)


async def show_rules_from_menu(message: types.Message, state: FSMContext):
    await state.finish()
    rules_text = (
        "üìú *–ü—Ä–∞–≤–∏–ª–∞ –∏–≥—Ä—ã:*\n\n"
        "‚Ä¢ –ö–∞–∂–¥—ã–π –¥–µ–Ω—å –≤—ã–±–∏—Ä–∞–µ—Ç—Å—è –Ω–æ–≤—ã–π –ø—Ä–æ–º–ø—Ç ‚Äî –Ω–∞—á–∞–ª–æ —à—É—Ç–∫–∏.\n"
        "‚Ä¢ –í—ã –º–æ–∂–µ—Ç–µ –¥–æ–ø–∏—Å–∞—Ç—å —Å–≤–æ—é —à—É—Ç–∫—É –Ω–∞ –µ–≥–æ –æ—Å–Ω–æ–≤–µ.\n"
        "‚Ä¢ –ó–∞—Ç–µ–º –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ –∑–∞ –ª—É—á—à–∏–µ —à—É—Ç–∫–∏.\n"
        "‚Ä¢ –í –∫–æ–Ω—Ü–µ –¥–Ω—è –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç—Å—è –¢–û–ü 5!\n\n"
        "‚ùó –ù–µ–ª—å–∑—è –ª–∞–π–∫–∞—Ç—å —Å–≤–æ–∏ —à—É—Ç–∫–∏.\n"
        "‚ùó –ù–µ–ª—å–∑—è –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –æ—Å–∫–æ—Ä–±–ª–µ–Ω–∏—è –∏–ª–∏ –Ω–µ—Ü–µ–Ω–∑—É—Ä–Ω—ã–µ —Ç–µ–∫—Å—Ç—ã."
    )
    await message.answer(rules_text, parse_mode="Markdown")

from database.joke_queries import get_user_stats



def register_profile_handlers(dp: Dispatcher):
    dp.register_message_handler(my_stats, text=MainMenuButton.STATS.value, state="*")
    dp.register_message_handler(show_rules_from_menu, text=MainMenuButton.RULES.value, state="*")
    dp.register_message_handler(toggle_notifications, text=MainMenuButton.UNSUBSCRIBE.value, state="*")
    dp.register_message_handler(toggle_notifications, text=MainMenuButton.SUBSCRIBE.value, state="*")