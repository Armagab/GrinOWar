from aiogram import types, Dispatcher
from aiogram.dispatcher import FSMContext

from states.bot_states import PromptStates

from keyboards.start_buttons import start_menu_keyboard, rules_keyboard
from keyboards.main_menu_keyboard import main_menu_keyboard
from services.prompt_manager import get_current_prompt
from utils.formatters import format_first_prompt_message
from database.user_queries import register_user_if_needed



async def start_command(message: types.Message):
    await register_user_if_needed(
        user_id=message.from_user.id,
        username=message.from_user.username,
        first_name=message.from_user.first_name
    )
    await message.answer(
        "üëã –ü—Ä–∏–≤–µ—Ç!\n\n"
        "–Ø –±–æ—Ç –¥–ª—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ —é–º–æ—Ä–∞!\n\n"
        "–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º –æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å –ø—Ä–∞–≤–∏–ª–∞–º–∏ –∏–≥—Ä—ã:",
        reply_markup=start_menu_keyboard()
    )


async def show_rules_callback(call: types.CallbackQuery):
    await call.answer()

    rules_text = (
        "üìú *–ü—Ä–∞–≤–∏–ª–∞ –∏–≥—Ä—ã:*\n\n"
        "‚Ä¢ –ö–∞–∂–¥—ã–π –¥–µ–Ω—å –≤—ã–±–∏—Ä–∞–µ—Ç—Å—è –Ω–æ–≤—ã–π –ø—Ä–æ–º–ø—Ç ‚Äî –Ω–∞—á–∞–ª–æ —à—É—Ç–∫–∏.\n"
        "‚Ä¢ –í—ã –º–æ–∂–µ—Ç–µ –¥–æ–ø–∏—Å–∞—Ç—å —Å–≤–æ—é —à—É—Ç–∫—É –Ω–∞ –µ–≥–æ –æ—Å–Ω–æ–≤–µ.\n"
        "‚Ä¢ –ó–∞—Ç–µ–º –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ –∑–∞ –ª—É—á—à–∏–µ —à—É—Ç–∫–∏.\n"
        "‚Ä¢ –í –∫–æ–Ω—Ü–µ –¥–Ω—è –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç—Å—è –¢–û–ü 5!\n\n"
        "‚ùó –ù–µ–ª—å–∑—è –ª–∞–π–∫–∞—Ç—å —Å–≤–æ–∏ —à—É—Ç–∫–∏.\n"
        "‚ùó –ù–µ–ª—å–∑—è –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –æ—Å–∫–æ—Ä–±–ª–µ–Ω–∏—è –∏–ª–∏ –Ω–µ—Ü–µ–Ω–∑—É—Ä–Ω—ã–µ —Ç–µ–∫—Å—Ç—ã."
    )

    await call.message.edit_text(rules_text, reply_markup=rules_keyboard(), parse_mode="Markdown")


async def ready_to_start_callback(call: types.CallbackQuery, state: FSMContext):
    await call.answer()
    await call.message.edit_reply_markup(reply_markup=None)

    prompt_text = get_current_prompt()
    formatted_message = format_first_prompt_message(prompt_text)

    kb = await main_menu_keyboard(call.from_user.id)
    await call.message.bot.send_message(
        call.message.chat.id,
        formatted_message,
        parse_mode="Markdown",
        reply_markup=kb
    )
    await state.set_state(PromptStates.waiting_for_joke)



def register_start_handlers(dp: Dispatcher):
    dp.register_message_handler(start_command, commands=["start"], state="*")
    dp.register_callback_query_handler(show_rules_callback, lambda c: c.data == "show_rules", state="*")
    dp.register_callback_query_handler(ready_to_start_callback, lambda c: c.data == "ready_to_start", state="*")